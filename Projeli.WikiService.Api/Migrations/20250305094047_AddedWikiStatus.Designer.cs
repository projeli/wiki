// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Projeli.WikiService.Infrastructure.Database;

#nullable disable

namespace Projeli.WikiService.Api.Migrations
{
    [DbContext(typeof(WikiServiceDbContext))]
    [Migration("20250305094047_AddedWikiStatus")]
    partial class AddedWikiStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryPage", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PagesId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "PagesId");

                    b.HasIndex("PagesId");

                    b.ToTable("CategoryPage");
                });

            modelBuilder.Entity("PageVersionWikiMember", b =>
                {
                    b.Property<Guid>("EditorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PageVersionsId")
                        .HasColumnType("uuid");

                    b.HasKey("EditorsId", "PageVersionsId");

                    b.HasIndex("PageVersionsId");

                    b.ToTable("PageVersionWikiMember");
                });

            modelBuilder.Entity("PageWikiMember", b =>
                {
                    b.Property<Guid>("EditorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PagesId")
                        .HasColumnType("uuid");

                    b.HasKey("EditorsId", "PagesId");

                    b.HasIndex("PagesId");

                    b.ToTable("PageWikiMember");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WikiId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WikiId", "Slug")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WikiId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WikiId", "Slug")
                        .IsUnique();

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.PageVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Difference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageVersions");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.Wiki", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ProjectSlug")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Wikis");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.WikiMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Permissions")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("WikiId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WikiId", "UserId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("CategoryPage", b =>
                {
                    b.HasOne("Projeli.WikiService.Domain.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeli.WikiService.Domain.Models.Page", null)
                        .WithMany()
                        .HasForeignKey("PagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PageVersionWikiMember", b =>
                {
                    b.HasOne("Projeli.WikiService.Domain.Models.WikiMember", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeli.WikiService.Domain.Models.PageVersion", null)
                        .WithMany()
                        .HasForeignKey("PageVersionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PageWikiMember", b =>
                {
                    b.HasOne("Projeli.WikiService.Domain.Models.WikiMember", null)
                        .WithMany()
                        .HasForeignKey("EditorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeli.WikiService.Domain.Models.Page", null)
                        .WithMany()
                        .HasForeignKey("PagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.Category", b =>
                {
                    b.HasOne("Projeli.WikiService.Domain.Models.Wiki", "Wiki")
                        .WithMany("Categories")
                        .HasForeignKey("WikiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wiki");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.Page", b =>
                {
                    b.HasOne("Projeli.WikiService.Domain.Models.Wiki", "Wiki")
                        .WithMany("Pages")
                        .HasForeignKey("WikiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wiki");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.PageVersion", b =>
                {
                    b.HasOne("Projeli.WikiService.Domain.Models.Page", "Page")
                        .WithMany("Versions")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.Wiki", b =>
                {
                    b.OwnsOne("Projeli.WikiService.Domain.Models.WikiConfig", "Config", b1 =>
                        {
                            b1.Property<Guid>("WikiId")
                                .HasColumnType("uuid");

                            b1.HasKey("WikiId");

                            b1.ToTable("Wikis");

                            b1.ToJson("Config");

                            b1.WithOwner()
                                .HasForeignKey("WikiId");

                            b1.OwnsOne("Projeli.WikiService.Domain.Models.WikiConfig+WikiConfigSidebar", "Sidebar", b2 =>
                                {
                                    b2.Property<Guid>("WikiConfigWikiId")
                                        .HasColumnType("uuid");

                                    b2.HasKey("WikiConfigWikiId");

                                    b2.ToTable("Wikis");

                                    b2.WithOwner()
                                        .HasForeignKey("WikiConfigWikiId");

                                    b2.OwnsMany("Projeli.WikiService.Domain.Models.WikiConfig+WikiConfigSidebar+WikiConfigSidebarItem", "Items", b3 =>
                                        {
                                            b3.Property<Guid>("WikiConfigSidebarWikiConfigWikiId")
                                                .HasColumnType("uuid");

                                            b3.Property<int>("Id")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<string>("Href")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Title")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.HasKey("WikiConfigSidebarWikiConfigWikiId", "Id");

                                            b3.ToTable("Wikis");

                                            b3.WithOwner()
                                                .HasForeignKey("WikiConfigSidebarWikiConfigWikiId");

                                            b3.OwnsMany("Projeli.WikiService.Domain.Models.WikiConfig+WikiConfigSidebar+WikiConfigSidebarItem.Category#WikiConfigSidebarItem", "Category", b4 =>
                                                {
                                                    b4.Property<Guid>("WikiConfigSidebarItemWikiConfigSidebarWikiConfigWikiId")
                                                        .HasColumnType("uuid");

                                                    b4.Property<int>("WikiConfigSidebarItemId")
                                                        .HasColumnType("integer");

                                                    b4.Property<int>("Id")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("integer");

                                                    b4.Property<string>("Href")
                                                        .IsRequired()
                                                        .HasColumnType("text");

                                                    b4.Property<string>("Title")
                                                        .IsRequired()
                                                        .HasColumnType("text");

                                                    b4.HasKey("WikiConfigSidebarItemWikiConfigSidebarWikiConfigWikiId", "WikiConfigSidebarItemId", "Id");

                                                    b4.ToTable("Wikis");

                                                    b4.WithOwner()
                                                        .HasForeignKey("WikiConfigSidebarItemWikiConfigSidebarWikiConfigWikiId", "WikiConfigSidebarItemId");
                                                });

                                            b3.Navigation("Category");
                                        });

                                    b2.Navigation("Items");
                                });

                            b1.Navigation("Sidebar")
                                .IsRequired();
                        });

                    b.Navigation("Config")
                        .IsRequired();
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.WikiMember", b =>
                {
                    b.HasOne("Projeli.WikiService.Domain.Models.Wiki", "Wiki")
                        .WithMany("Members")
                        .HasForeignKey("WikiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wiki");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.Page", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Projeli.WikiService.Domain.Models.Wiki", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Members");

                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
